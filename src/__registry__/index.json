{
  "AvatarList": {
    "name": "AvatarList",
    "description": "",
    "type": "butter",
    "files": [
      "src/registry/butter/AvatarList.astro"
    ],
    "component": "async () => import(\"../registry/butter/AvatarList.astro\")",
    "code": "---\nimport { Image } from \\\"astro:assets\\\";\nimport { cva } from \\\"class-variance-authority\\\";\nimport type { AvatarItem } from \\\"../../types/index.ts\\\";\n\ninterface AvatarList {\n  data: AvatarItem[];\n  direction?: \\\"horizontal\\\" | \\\"vertical-left\\\" | \\\"vertical-right\\\";\n  size?: \\\"medium\\\" | \\\"small\\\";\n  shape?: \\\"circle\\\" | \\\"rounded\\\";\n  imageStyles?: string;\n  nameStyles?: string;\n}\n\nconst avatar = cva(\\\"\\\", {\n  variants: {\n    direction: {\n      horizontal: [\\\"\\\"],\n      \\\"vertical-left\\\": [\\\"flex-col\\\"],\n      \\\"vertical-right\\\": [\\\"flex-col\\\"],\n    },\n    size: {\n      small: [\\\"w-9 h-9\\\"],\n      medium: [\\\"w-16 h-16 max-sm:w-14 max-sm:h-14\\\"],\n    },\n    shape: {\n      circle: [\\\"rounded-full\\\"],\n      rounded: [\\\"rounded-xl\\\"],\n    },\n  },\n  defaultVariants: {\n    direction: \\\"horizontal\\\",\n  },\n});\n\nconst {\n  data = [],\n  direction = \\\"horizontal\\\",\n  size = \\\"medium\\\",\n  shape = \\\"circle\\\",\n  nameStyles = \\\"\\\",\n  imageStyles = \\\"\\\",\n} = Astro.props as AvatarList;\n---\n\n<ul\n  class:list={[\n    \\\"avatar flex relative\\\",\n    direction !== \\\"horizontal\\\" && avatar({ direction }),\n  ]}\n>\n  {\n    data.map(({ name, src, alt }) => (\n      <li\n        class:list={[\n          \\\"avatar-item relative first:ml-0 first:mt-0\\\",\n          direction === \\\"horizontal\\\"\n            ? size === \\\"medium\\\"\n              ? \\\"-ml-5\\\"\n              : \\\"-ml-3\\\"\n            : direction === \\\"vertical-left\\\" || direction === \\\"vertical-right\\\"\n              ? size === \\\"medium\\\"\n                ? \\\"-mt-5\\\"\n                : \\\"-mb-3\\\"\n              : \\\"\\\",\n        ]}\n      >\n        <Image\n          src={src || \\\"/placeholder.svg\\\"}\n          alt={alt}\n          width={size === \\\"small\\\" ? 36 : 64}\n          height={size === \\\"small\\\" ? 36 : 64}\n          widths={[36, 64]}\n          sizes=\\\"(max-width: 360px) 36px, 64px\\\"\n          loading=\\\"lazy\\\"\n          class:list={[\n            \\\"avatar-image object-cover aspect-square ring-white shadow-xl shadow-black/15 dark:ring-zinc-100\\\",\n            size === \\\"small\\\" ? \\\"ring-[3px]\\\" : \\\"ring-[3px] md:ring-[4px]\\\",\n            avatar({ size, shape }),\n            imageStyles,\n          ]}\n        />\n        <span\n          class:list={[\n            \\\"avatar-name absolute opacity-100 -translate-y-1/2 px-[6px] py-[1px] text-zinc-700 rounded-full bg-white ring-1 ring-zinc-300 dark:ring-zinc-100 dark:bg-zinc-300\\\",\n            nameStyles,\n            size === \\\"medium\\\" ? \\\"text-sm\\\" : \\\"text-xs\\\",\n\n            direction === \\\"horizontal\\\" && \\\"left-1/2 -translate-x-1/2\\\",\n\n            (direction === \\\"vertical-left\\\" || direction === \\\"vertical-right\\\") &&\n              \\\"top-1/2\\\",\n\n            direction === \\\"horizontal\\\"\n              ? size === \\\"medium\\\"\n                ? \\\"-top-8\\\"\n                : size === \\\"small\\\"\n                  ? \\\"-top-6\\\"\n                  : \\\"\\\"\n              : \\\"\\\",\n\n            direction === \\\"vertical-right\\\"\n              ? size === \\\"medium\\\"\n                ? \\\"left-full ml-4\\\"\n                : size === \\\"small\\\"\n                  ? \\\"left-full ml-4\\\"\n                  : \\\"\\\"\n              : direction === \\\"vertical-left\\\"\n                ? size === \\\"medium\\\"\n                  ? \\\"right-full mr-4\\\"\n                  : size === \\\"small\\\"\n                    ? \\\"right-full mr-4\\\"\n                    : \\\"\\\"\n                : \\\"\\\",\n          ]}\n        >\n          {name}\n        </span>\n      </li>\n    ))\n  }\n</ul>\n\n<script>\n  import { gsap } from \\\"gsap\\\";\n\n  function initAvatar() {\n    const \\$avatarList = document.querySelectorAll(\\\".avatar\\\");\n    if (!\\$avatarList.length) return;\n\n    \\$avatarList.forEach((\\$avatarItem) => {\n      const handleAvatar = (ev: Event, isEnter: boolean) => {\n        const \\$item = (ev.target as HTMLElement).closest(\\\".avatar-item\\\");\n        if (\\$item && \\$avatarItem.contains(\\$item)) {\n          const \\$name = \\$item.querySelector(\\\".avatar-name\\\") as HTMLElement;\n\n          gsap.to(\\$item, {\n            y: isEnter ? -10 : 0,\n            duration: 0.6,\n            ease: \\\"elastic.out(0.6, 0.3)\\\",\n          });\n\n          gsap.to(\\$name, {\n            opacity: isEnter ? 1 : 0,\n            scale: isEnter ? 1 : 0.9,\n            filter: isEnter ? \\\" blur(0px)\\\" : \\\"blur(4px)\\\",\n            duration: 0.3,\n            ease: \\\"power1\\\",\n          });\n        }\n      };\n\n      \\$avatarItem.addEventListener(\n        \\\"mouseenter\\\",\n        (ev) => handleAvatar(ev, true),\n        true,\n      );\n      \\$avatarItem.addEventListener(\n        \\\"mouseleave\\\",\n        (ev) => handleAvatar(ev, false),\n        true,\n      );\n    });\n  }\n  initAvatar();\n</script>\n\n<style>\n  .avatar-name {\n    visibility: hidden;\n    scale: 0.9;\n    transition: visibility 0.3s ease;\n  }\n  .avatar-item:hover .avatar-name {\n    visibility: visible;\n  }\n</style>\n"
  },
  "Jumpy": {
    "name": "Jumpy",
    "description": "",
    "type": "butter",
    "files": [
      "src/registry/butter/Jumpy.astro"
    ],
    "component": "async () => import(\"../registry/butter/Jumpy.astro\")",
    "code": "---\nimport { cva } from \\\"class-variance-authority\\\";\nimport { Image } from \\\"astro:assets\\\";\nimport { type ImageItem } from \\\"../../types/index.ts\\\";\n\ninterface JellyProps {\n  images: ImageItem[];\n  size?: \\\"small\\\" | \\\"medium\\\" | \\\"large\\\";\n  minRotation?: number;\n  maxRotation?: number;\n  wrapperStyles?: string;\n  imageStyles?: string;\n  spacing?: string;\n  spacingHover?: number;\n  initEase?: gsap.EaseFunction | string;\n  hoverEase?: gsap.EaseFunction | string;\n  duration?: number;\n}\n\nconst jelly = cva(\\\"jelly\\\", {\n  variants: {\n    size: {\n      small: [\\\"w-10 h-10\\\", \\\"md:w-12 md:h-12\\\", \\\"lg:w-14 lg:h-14\\\", \\\"ring-3\\\"],\n      medium: [\n        \\\"w-12 h-12\\\",\n        \\\"md:w-14 md:h-14\\\",\n        \\\"lg:w-16 lg:h-16\\\",\n        \\\"ring-3 md:ring-4\\\",\n      ],\n      large: [\n        \\\"w-14 h-14\\\",\n        \\\"md:w-18 md:h-18\\\",\n        \\\"lg:w-22 lg:h-22\\\",\n        \\\"ring-3 md:ring-4\\\",\n      ],\n    },\n  },\n});\n\nlet rotations: number[] = [];\n\nconst generateRotations = function (min: number, max: number) {\n  for (let i = 0; i < images.length; i++) {\n    const rotation = Math.random() * (max - min) + min;\n\n    let getValue = Math.random() > 0.5 ? rotation : -rotation;\n    rotations = [...rotations, getValue];\n  }\n};\n\nconst {\n  images = [],\n  size = \\\"large\\\",\n  spacing = \\\"-ml-6\\\",\n  spacingHover = 40,\n  minRotation = 7,\n  maxRotation = 8,\n  duration = 0.4,\n  initEase = \\\"elastic.out(0.5, 0.4)\\\",\n  hoverEase = \\\"power4.out\\\",\n  imageStyles = \\\"\\\",\n  wrapperStyles = \\\"\\\",\n} = Astro.props as JellyProps;\n\ngenerateRotations(minRotation, maxRotation);\n---\n\n<div\n  class=\\\"flex image-gallery\\\"\n  data-jumpy-rotations={rotations.join(\\\",\\\")}\n  data-jumpy-spacing-hover={spacingHover}\n  data-jumpy-init-ease={initEase}\n  data-jumpy-hover-ease={hoverEase}\n  data-jumpy-duration={duration}\n>\n  {\n    images &&\n      images.map(({ src, alt, href }, idx) => (\n        <>\n          {href ? (\n            <a\n              href={href}\n              target=\\\"_blank\\\"\n              class:list={[\n                \\\"relative first:ml-0 ring-white rounded-xl overflow-hidden shadow-black/20 shadow-xl dark:ring-zinc-100\\\",\n                jelly({ size }),\n                wrapperStyles,\n                spacing,\n              ]}\n              style={\\`transform: rotate(\\${rotations[idx]}deg)\\`}\n            >\n              <Image\n                src={src || \\\"/placeholder.svg\\\"}\n                alt={alt}\n                width={size === \\\"small\\\" ? 56 : size === \\\"medium\\\" ? 64 : 88}\n                height={size === \\\"small\\\" ? 56 : size === \\\"medium\\\" ? 64 : 88}\n                widths={[56, 64, 88]}\n                sizes=\\\"(max-width: 360px) 56px, (max-width: 720px) 64px, 88px\\\"\n                loading=\\\"lazy\\\"\n                class:list={[\\\"aspect-square object-cover\\\", imageStyles]}\n              />\n            </a>\n          ) : (\n            <div\n              class:list={[\n                \\\"relative first:ml-0 ring-white rounded-xl overflow-hidden shadow-black/20 shadow-xl dark:ring-zinc-100\\\",\n                jelly({ size }),\n                spacing,\n              ]}\n              style={\\`transform: rotate(\\${rotations[idx]}deg)\\`}\n            >\n              {\\\" \\\"}\n              <Image\n                src={src || \\\"/placeholder.svg\\\"}\n                alt={alt}\n                width={size === \\\"small\\\" ? 56 : size === \\\"medium\\\" ? 64 : 88}\n                height={size === \\\"small\\\" ? 56 : size === \\\"medium\\\" ? 64 : 88}\n                widths={[56, 64, 88]}\n                sizes=\\\"(max-width: 360px) 56px, (max-width: 720px) 64px, 88px\\\"\n                loading=\\\"lazy\\\"\n                class:list={[\\\"aspect-square object-cover\\\", imageStyles]}\n              />\n            </div>\n          )}\n        </>\n      ))\n  }\n</div>\n\n<script>\n  import { gsap } from \\\"gsap\\\";\n\n  function initJumpy(container: HTMLElement) {\n    const rotations =\n      container?.dataset.jumpyRotations\n        ?.split(\\\",\\\")\n        .map((value) => Number(value)) ?? [];\n\n    const spacing = Number(container?.dataset.jumpySpacingHover);\n    const initEase = container?.dataset.jumpyInitEase;\n    const hoverEase = container?.dataset.jumpyHoverEase;\n    const duration = Number(container?.dataset.jumpyDuration);\n\n    const images = container?.children ?? [];\n    let lastHoveredRotation: number | null = null;\n\n    gsap.fromTo(\n      images,\n      { scale: 0 },\n      { scale: 1, stagger: 0.05, ease: initEase },\n    );\n\n    function moveImages(idx: number) {\n      if (lastHoveredRotation !== null && lastHoveredRotation !== idx) {\n        gsap.to(images[lastHoveredRotation], {\n          duration: 0.6,\n          rotation: rotations[lastHoveredRotation],\n          ease: hoverEase,\n        });\n      }\n\n      lastHoveredRotation = idx;\n\n      const SPACING = spacing;\n\n      [...images].forEach((image, i) => {\n        gsap.to(image, {\n          x: idx < i ? SPACING : idx > i ? -SPACING : 0,\n          duration,\n          ease: hoverEase,\n          rotation: idx === i ? 0 : rotations[i],\n        });\n      });\n    }\n\n    function leaveImages() {\n      [...images].forEach((image, idx) => {\n        gsap.to(image, {\n          rotate: rotations[idx],\n          x: 0,\n          duration: duration + 0.2,\n          ease: initEase,\n        });\n      });\n    }\n    Array.from(images).forEach((image, idx) => {\n      image.addEventListener(\\\"mouseenter\\\", () => moveImages(idx));\n    });\n\n    container?.addEventListener(\\\"mouseleave\\\", () => leaveImages());\n  }\n\n  document.addEventListener(\\\"DOMContentLoaded\\\", () => {\n    const galleries = document.querySelectorAll(\\\".image-gallery\\\");\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting && entry.target instanceof HTMLElement) {\n          initJumpy(entry.target);\n          observer.unobserve(entry.target);\n        }\n      });\n    });\n    galleries.forEach((gallery) => observer.observe(gallery));\n  });\n</script>\n"
  },
  "Jelly": {
    "name": "Jelly",
    "description": "",
    "type": "butter",
    "files": [
      "src/registry/butter/Jelly.astro"
    ],
    "component": "async () => import(\"../registry/butter/Jelly.astro\")",
    "code": "---\nimport { Image } from \\\"astro:assets\\\";\nimport { Icon } from \\\"astro-icon/components\\\";\n\nexport interface JellyProps {\n  title: string;\n  owner: string;\n  location: string;\n  src: string;\n  alt: string;\n  iconLocation?: string;\n  width?: string;\n  height?: string;\n  containerClass?: string;\n  titleClass?: string;\n  ownerClass?: string;\n  locationClass?: string;\n  animate?: boolean;\n}\n\nconst {\n  title,\n  owner,\n  location,\n  iconLocation = \\\"location\\\",\n  alt,\n  src,\n  width = \\\"w-60\\\",\n  height = \\\"h-72\\\",\n  containerClass,\n  titleClass,\n  ownerClass,\n  locationClass,\n  animate = true,\n} = Astro.props as JellyProps;\n\nlet transformInfoY = animate ? \\\"80%\\\" : 0;\nlet transformTextsY = animate ? \\\"30%\\\" : 0;\nlet blur = animate ? \\\"4px\\\" : 0;\nlet opacity = animate ? 0 : 1;\n---\n\n<div\n  class:list={[\\\"rounded-3xl overflow-hidden\\\", width, height, containerClass]}\n>\n  <div\n    data-animate={animate}\n    class:list={[\\\"jelly-reveal-container relative\\\", width, height]}\n  >\n    <Image\n      src={src}\n      alt={alt}\n      height={288}\n      width={240}\n      loading=\\\"lazy\\\"\n      class=\\\"jelly-image size-full object-cover absolute inset-0\\\"\n    />\n    <div class=\\\"flex flex-col justify-end h-full\\\">\n      <div\n        class=\\\"jelly-reveal-info relative bg-black/50 backdrop-blur-md saturate-100 contrast-125\\\"\n      >\n        <div class=\\\"p-4 block\\\">\n          <h4 class:list={[\\\"text-xl font-bold text-white\\\", titleClass]}>\n            {title}\n          </h4>\n          <span class:list={[\\\"text-sm block text-white/50\\\", ownerClass]}\n            >{owner}</span\n          >\n        </div>\n        <footer class=\\\"jelly-reveal-footer p-4 block\\\">\n          <span\n            class:list={[\n              \\\"text-sm flex items-center gap-1 text-white\\\",\n              locationClass,\n            ]}\n          >\n            <span><Icon name={iconLocation} class=\\\"text-white\\\" /></span>{\n              location\n            }</span\n          >\n        </footer>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  import gsap from \\\"gsap\\\";\n\n  document.querySelectorAll(\\\".jelly-reveal-container\\\").forEach((el) => {\n    const container = el as HTMLElement;\n\n    const animate = container.dataset.animate === \\\"true\\\";\n    if (!animate) return;\n\n    const info = container.querySelector(\\\".jelly-reveal-info\\\");\n    const texts = container.querySelectorAll(\n      \\\".jelly-reveal-info h4, .jelly-reveal-info span\\\",\n    );\n\n    function jellyReveaAnimation(isAnimated: boolean) {\n      gsap.to(info, {\n        y: isAnimated ? 0 : \\\"80%\\\",\n        opacity: isAnimated ? 1 : 0,\n        duration: 0.6,\n        ease: isAnimated ? \\\"expo.out\\\" : \\\"back.out\\\",\n      });\n\n      gsap.to(texts, {\n        opacity: isAnimated ? 1 : 0,\n        y: isAnimated ? 0 : \\\"30%\\\",\n        filter: isAnimated ? \\\"blur(0px)\\\" : \\\"blur(4px)\\\",\n        stagger: 0.06,\n        duration: 0.6,\n        ease: \\\"power4.out\\\",\n        delay: isAnimated ? 0.1 : 0,\n      });\n    }\n\n    container.addEventListener(\\\"mouseenter\\\", () => jellyReveaAnimation(true));\n    container.addEventListener(\\\"mouseleave\\\", () => jellyReveaAnimation(false));\n  });\n</script>\n\n<style define:vars={{ transformInfoY, transformTextsY, opacity, blur }}>\n  .jelly-reveal-info {\n    transform: translateY(var(--transformInfoY));\n    opacity: var(--opacity);\n  }\n  .jelly-reveal-info h4,\n  .jelly-reveal-info span {\n    transform: translateY(var(--transformTextsY));\n    filter: blur(var(--blur));\n    opacity: var(--opacity);\n  }\n</style>\n"
  },
  "AvatarListMain": {
    "name": "AvatarListMain",
    "description": "",
    "type": "example",
    "files": [
      "src/registry/examples/AvatarListMain.astro"
    ],
    "component": "async () => import(\"../registry/examples/AvatarListMain.astro\")",
    "code": "---\nimport { AvatarList, type AvatarItem } from \\\"@butter-js/ui\\\";\n\nconst example: AvatarItem[] = [\n  {\n    name: \\\"Three.js\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1510259524271173638/lgTEVmRi_400x400.jpg\\\",\n    alt: \\\"Three.js Logo\\\",\n  },\n  {\n    name: \\\"Midulive\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1824773087323111424/-S3LUmjQ_400x400.jpg\\\",\n    alt: \\\"Midulive Logo\\\",\n  },\n  {\n    name: \\\"Svelte\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1121395911849062400/7exmJEg4_400x400.png\\\",\n    alt: \\\"Svelte Logo\\\",\n  },\n  {\n    name: \\\"Astro\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1632785343433908224/SnMGR19O_400x400.png\\\",\n    alt: \\\"Astro Logo\\\",\n  },\n  {\n    name: \\\"Gsap\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1713633504431394816/h28jJ1qM_400x400.jpg\\\",\n    alt: \\\"Gsap Logo\\\",\n  },\n];\n---\n\n<AvatarList data={example} direction=\\\"vertical-right\\\" />\n"
  },
  "AvatarListVertical": {
    "name": "AvatarListVertical",
    "description": "",
    "type": "example",
    "files": [
      "src/registry/examples/AvatarListVertical.astro"
    ],
    "component": "async () => import(\"../registry/examples/AvatarListVertical.astro\")",
    "code": "---\nimport { AvatarList, type AvatarItem } from \\\"@butter-js/ui\\\";\n\nconst example: AvatarItem[] = [\n  {\n    name: \\\"Svelte\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1121395911849062400/7exmJEg4_400x400.png\\\",\n    alt: \\\"Svelte Logo\\\",\n  },\n  {\n    name: \\\"Three.js\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1510259524271173638/lgTEVmRi_400x400.jpg\\\",\n    alt: \\\"Three.js Logo\\\",\n  },\n  {\n    name: \\\"Astro\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1632785343433908224/SnMGR19O_400x400.png\\\",\n    alt: \\\"Astro Logo\\\",\n  },\n];\n---\n\n<AvatarList data={example} direction=\\\"vertical-right\\\" size=\\\"medium\\\" />\n"
  },
  "AvatarListBlog": {
    "name": "AvatarListBlog",
    "description": "",
    "type": "example",
    "files": [
      "src/registry/examples/AvatarListBlog.astro"
    ],
    "component": "async () => import(\"../registry/examples/AvatarListBlog.astro\")",
    "code": "---\nimport { AvatarList, type AvatarItem } from \\\"@butter-js/ui\\\";\n\nconst avatars: AvatarItem[] = [\n  {\n    name: \\\"Gsap\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1713633504431394816/h28jJ1qM_400x400.jpg\\\",\n    alt: \\\"Gsap logo\\\",\n  },\n  {\n    name: \\\"FredKSchott\\\",\n    src: \\\"https://pbs.twimg.com/profile_images/1272979356529221632/sxvncugt_400x400.jpg\\\",\n    alt: \\\"Heeector logo\\\",\n  },\n];\n\nlet text = \\\"\\\";\n\nfunction getNames() {\n  for (let i = 0; i < avatars.length; i++) {\n    if (avatars.length > 1 && i === avatars.length - 1) {\n      text += \\` and <span class=\\\"text-zinc-900\\\">\\${avatars[i].name}</span>\\`;\n    } else if (i > 0 && i < avatars.length - 1) {\n      text += \\`, <span class=\\\"text-zinc-900\\\">\\${avatars[i].name}</span>\\`;\n    } else {\n      text += \\`<span class=\\\"text-zinc-900\\\">\\${avatars[i].name}</span>\\`;\n    }\n  }\n}\ngetNames();\n---\n\n<section\n  class=\\\"max-w-[95%] md:max-w-[70%] p-5 bg-zinc-100 rounded-xl dark:bg-white\\\"\n>\n  <h1 class=\\\"text-zinc-800 text-xl md:text-2xl lg:text-3xl font-medium\\\">\n    Create animated avatars for stunning UI 😎\n  </h1>\n  <p class=\\\"py-2 lg:py-5 text-zinc-600 text-small lg:text-body\\\">\n    Learn how to design and animate <span class=\\\"text-zinc-900\\\">avatars</span> that\n    bring life to your UI. Using <span class=\\\"text-zinc-900\\\">GSAP</span>, you\n    can create <span class=\\\"text-zinc-900\\\"\n      >dynamic hover effects, smooth scaling</span\n    >, and <span class=\\\"text-zinc-900\\\">interactive transitions</span>. These\n    animated avatars are perfect for adding <span class=\\\"text-zinc-900\\\"\n      >personality</span\n    > to your project, whether it's a website, app, or portfolio. Stand out with\n    engaging and <span class=\\\"text-zinc-900\\\">visually appealing animations</span\n    > that captivate your audience!\n  </p>\n  <div class=\\\"flex items-center gap-3\\\">\n    <AvatarList\n      data={avatars}\n      size=\\\"small\\\"\n      imageStyles=\\\"!ring-zinc-100 !shadow-none\\\"\n    />\n    <div>\n      <p class=\\\"text-xs text-zinc-900\\\">Created by</p>\n      <p class=\\\"text-xs text-zinc-900\\\" set:html={text} />\n    </div>\n  </div>\n</section>\n"
  },
  "JumpyMain": {
    "name": "JumpyMain",
    "description": "",
    "type": "example",
    "files": [
      "src/registry/examples/JumpyMain.astro"
    ],
    "component": "async () => import(\"../registry/examples/JumpyMain.astro\")",
    "code": "---\nimport type { ImageItem } from \\\"src/types\\\";\nimport Jumpy from \\\"../butter/Jumpy.astro\\\";\n\nconst example: ImageItem[] = [\n  {\n    src: \\\"https://a0.muscache.com/im/pictures/hosting/Hosting-1124010734237889235/original/5d19481e-59be-49ab-a820-4af2ef1052aa.jpeg?im_w=720&im_format=avif\\\",\n    alt: \\\"Imagen 1\\\",\n  },\n  {\n    src: \\\"https://a0.muscache.com/im/pictures/hosting/Hosting-1124010734237889235/original/0dedcab2-8e2d-4aa9-9209-41abaa775b26.jpeg?im_w=720&im_format=avif\\\",\n    alt: \\\"Imagen 2\\\",\n  },\n  {\n    src: \\\"https://a0.muscache.com/im/pictures/hosting/Hosting-1124010734237889235/original/d97467a3-fe5a-4a2d-a15b-9870257eec66.jpeg?im_w=720&im_format=avif\\\",\n    alt: \\\"Imagen 3\\\",\n  },\n  {\n    src: \\\"https://a0.muscache.com/im/pictures/hosting/Hosting-1124010734237889235/original/7c1d094c-8e8d-4e5d-83e8-7fca80de7486.jpeg?im_w=720&im_format=avif\\\",\n    alt: \\\"Imagen 4\\\",\n  },\n  {\n    src: \\\"https://a0.muscache.com/im/pictures/hosting/Hosting-1124010734237889235/original/4449af5d-53a5-4909-b416-db802314894b.jpeg?im_w=720&im_format=avif\\\",\n    alt: \\\"Imagen 5\\\",\n  },\n];\n---\n\n<Jumpy images={example} />\n"
  },
  "JumpyText": {
    "name": "JumpyText",
    "description": "",
    "type": "example",
    "files": [
      "src/registry/examples/JumpyText.astro"
    ],
    "component": "async () => import(\"../registry/examples/JumpyText.astro\")",
    "code": "---\nimport Jumpy from \\\"../butter/Jumpy.astro\\\";\n\nconst images = [\n  {\n    src: \\\"https://cdn-icons-png.flaticon.com/512/3991/3991951.png\\\",\n    alt: \\\"Dribbble logo\\\",\n    href: \\\"https://dribbble.com/\\\",\n  },\n  {\n    src: \\\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/1690643591twitter-x-logo-png.webp/2000px-1690643591twitter-x-logo-png.webp.png\\\",\n    alt: \\\"X logo\\\",\n    href: \\\"https://x.com/heeector00\\\",\n  },\n  {\n    src: \\\"https://img.freepik.com/vector-premium/logo-linkedin_578229-227.jpg\\\",\n    alt: \\\"LinkedIn logo\\\",\n    href: \\\"https://www.linkedin.com/feed/\\\",\n  },\n];\n---\n\n<h1\n  class=\\\"text-center text-black dark:text-white text-4xl/tight md:text-5xl/tight lg:text-6xl/tight\\\"\n>\n  <span>Thanks for visiting!</span>\n  <span class=\\\"flex items-center gap-4\\\"\n    >Reach me on <div>\n      <Jumpy\n        images={images}\n        wrapperStyles=\\\"!ring-0\\\"\n        size=\\\"small\\\"\n        spacing=\\\"-ml-4 md:-ml-5\\\"\n        spacingHover={20}\n      />\n    </div>\n  </span>\n</h1>\n"
  },
  "JellyMain": {
    "name": "JellyMain",
    "description": "",
    "type": "example",
    "files": [
      "src/registry/examples/JellyMain.astro"
    ],
    "component": "async () => import(\"../registry/examples/JellyMain.astro\")",
    "code": "---\nimport Jelly from \\\"../butter/Jelly.astro\\\";\n\nconst data = [\n  {\n    title: \\\"The Alpes\\\",\n    owner: \\\"@wickedmishra on Dribbble\\\",\n    location: \\\"Zugspitze, Alemania\\\",\n    alt: \\\"text alternative\\\",\n    src: \\\"https://w0.peakpx.com/wallpaper/980/128/HD-wallpaper-sunset-over-the-village-wamberg-bavarian-alps-trees-germany-mountains-cabin-clouds-sky.jpg\\\",\n    width: \\\"w-60\\\",\n    height: \\\"h-72\\\",\n    containerClass: \\\"\\\",\n    titleClass: \\\"\\\",\n    ownerClass: \\\"\\\",\n    locationClass: \\\"\\\",\n    animate: true,\n  },\n];\n---\n\n{data.map((item) => <Jelly {...item} />)}\n"
  },
  "JellyCards": {
    "name": "JellyCards",
    "description": "",
    "type": "example",
    "files": [
      "src/registry/examples/JellyCards.astro"
    ],
    "component": "async () => import(\"../registry/examples/JellyCards.astro\")",
    "code": "---\nimport JellyReveal from \\\"../butter/Jelly.astro\\\";\n\nconst cardsData = [\n  {\n    title: \\\"Iglesia en Frankfurt\\\",\n    owner: \\\"@heeector on Twitter\\\",\n    location: \\\"Dreikonigskirche, Alemania\\\",\n    src: \\\"https://www.expedia.mx/stories/wp-content/uploads/2021/11/Aerial-view-of-Cologne-Germany.jpg\\\",\n    alt: \\\"Iglesia en Frankfurt\\\",\n  },\n  {\n    title: \\\"Castillo de Neuschwanstein\\\",\n    owner: \\\"@travelphotographer on Instagram\\\",\n    location: \\\"Baviera, Alemania\\\",\n    src: \\\"https://upload.wikimedia.org/wikipedia/commons/f/f8/Schloss_Neuschwanstein_2013.jpg\\\",\n    alt: \\\"Castillo de Neuschwanstein en los Alpes bávaros\\\",\n  },\n  {\n    title: \\\"Puerta de Brandenburgo\\\",\n    owner: \\\"@berlinlover on Twitter\\\",\n    location: \\\"Berlín, Alemania\\\",\n    src: \\\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a6/Brandenburger_Tor_abends.jpg/1200px-Brandenburger_Tor_abends.jpg\\\",\n    alt: \\\"Puerta de Brandenburgo iluminada por la noche\\\",\n  },\n  {\n    title: \\\"Puerto de Hamburgo\\\",\n    owner: \\\"@maritimephotography on Instagram\\\",\n    location: \\\"Hamburgo, Alemania\\\",\n    src: \\\"https://a.cdn-hotels.com/gdcs/production143/d1112/c4fedab1-4041-4db5-9245-97439472cf2c.jpg\\\",\n    alt: \\\"Vista panorámica del Puerto de Hamburgo\\\",\n  },\n];\n---\n\n<div class=\\\"w-full flex justify-center\\\">\n  <div class=\\\"grid grid-cols-2 gap-4 place-items-center\\\">\n    {\n      cardsData.map(({ title, owner, location, src, alt }) => (\n        <JellyReveal\n          title={title}\n          owner={owner}\n          location={location}\n          src={src}\n          alt={alt}\n          width=\\\"w-52\\\"\n          height=\\\"h-52\\\"\n          containerClass=\\\"shadow-lg\\\"\n          titleClass=\\\"!text-body\\\"\n          ownerClass=\\\"italic\\\"\n          locationClass=\\\"font-semibold\\\"\n        />\n      ))\n    }\n  </div>\n</div>\n"
  }
}