---
import { Index } from "../__registry__/index";
import Grid from "./Grid.astro";
import CodeBlock from "./CodeBlock.astro";
import { Icon } from "astro-icon/components";

const { name, meta } = Astro.props;

const entry = Index[name];

let description = entry.description;

let DynamicComponent;
let codeSnippet;

try {
  const module = await entry.component();
  DynamicComponent = module.default;
  codeSnippet = entry.code;
} catch (err) {
  console.error(`El componente ${name} no pudo ser cargado:`, err);
}
---

<section class="w-full max-w-[52.563rem] min-w-[18.75rem] mt-5">
  <header class="header flex items-center mb-5">
    {description && <p set:html={description} />}
    <div class="switch">
      <button
        type="button"
        class="button switch-active flex items-center"
        data-action="preview"
      >
        <Icon name="code" />
        <span>Preview</span>
      </button>
      <button type="button" data-action="code" class="flex items-center">
        <Icon name="preview" />
        <span>Code</span>
      </button>
    </div>
  </header>
  <div class="preview">
    <div class="component">
      {
        DynamicComponent ? (
          <DynamicComponent />
        ) : (
          <p>Error: No se pudo cargar el componente "{name}".</p>
        )
      }
    </div>
    <div class="radial-gradient"></div>
    <div class="radial-gradient blur-sm"></div>
    <Grid
      class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 scale-[0.65]"
    />
  </div>
  <div class="code hidden">
    <CodeBlock name={name} code={codeSnippet} meta={meta} />
  </div>
</section>

<script>
  const $switches = document.querySelectorAll(".switch");
  const $preview = document.querySelectorAll(".preview");
  const $code = document.querySelectorAll(".code");

  const SWITCH = "switch-active";
  const HIDDEN = "hidden";

  $switches.forEach(($switch, idx) => {
    $switch.addEventListener("click", (ev) => {
      const target = ev.target as HTMLElement | null;
      const btnActive = target?.closest("button") as HTMLButtonElement;

      if (!btnActive || btnActive?.classList.contains(SWITCH)) return;

      const currentActive = $switch.querySelector(`.${SWITCH}`);
      currentActive?.classList.remove(SWITCH);
      btnActive?.classList.add(SWITCH);

      if (btnActive.dataset.action === "preview") {
        $preview[idx].classList.remove(HIDDEN);
        $code[idx].classList.add(HIDDEN);
      } else if (btnActive.dataset.action === "code") {
        $preview[idx].classList.add(HIDDEN);
        $code[idx].classList.remove(HIDDEN);
      }
    });
  });
</script>

<style>
  .radial-gradient {
    background-image: radial-gradient(
      ellipse at center,
      transparent 20%,
      oklch(10.76% 0.023 266) 90%
    );
  }
  .radial-gradient.blur {
    mask-image: radial-gradient(
      ellipse at center,
      transparent 20%,
      oklch(10.76% 0.023 266) 100%
    );
    backdrop-filter: blur(10px);
  }
</style>
