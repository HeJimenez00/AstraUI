---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import { cva } from "class-variance-authority";

const avatar = cva("", {
  variants: {
    direction: {
      horizontal: [""],
      vertical: ["flex-col"],
    },
    size: {
      small: ["w-9 h-9"],
      medium: ["w-16 h-16 max-sm:w-14 max-sm:h-14"],
    },
    shape: {
      circle: ["rounded-full"],
      rounded: ["rounded-xl"],
    },
  },
});

interface AvatarItem {
  name: string;
  src: string | ImageMetadata;
  alt: string;
}

interface AvatarList {
  data: AvatarItem[];
  direction?: "horizontal" | "vertical";
  size?: "medium" | "small";
  shape?: "circle" | "rounded";
  imageStyles?: string;
  nameStyles?: string;
}

const example: AvatarItem[] = [
  {
    name: "Three.js",
    src: "https://pbs.twimg.com/profile_images/1510259524271173638/lgTEVmRi_400x400.jpg",
    alt: "Three.js Logo",
  },
  {
    name: "Midulive",
    src: "https://pbs.twimg.com/profile_images/1824773087323111424/-S3LUmjQ_400x400.jpg",
    alt: "Midulive Logo",
  },
  {
    name: "Svelte",
    src: "https://pbs.twimg.com/profile_images/1121395911849062400/7exmJEg4_400x400.png",
    alt: "Svelte Logo",
  },
  {
    name: "Astro",
    src: "https://pbs.twimg.com/profile_images/1632785343433908224/SnMGR19O_400x400.png",
    alt: "Astro Logo",
  },
  {
    name: "Gsap",
    src: "https://pbs.twimg.com/profile_images/1713633504431394816/h28jJ1qM_400x400.jpg",
    alt: "Gsap Logo",
  },
];

const {
  data = example,
  direction = "horizontal",
  size = "medium",
  shape = "circle",
  nameStyles = "bg-white text-gray-950",
  imageStyles = "ring-[3px] md:ring-[4px] ring-white",
} = Astro.props as AvatarList;
---

<ul
  class:list={[
    "avatar flex",
    direction !== "horizontal" && avatar({ direction }),
  ]}
>
  {
    data.map(({ name, src, alt }) => (
      <li
        class:list={[
          "avatar-item relative first:ml-0 first:mt-0",
          direction === "horizontal" && size === "medium" && "-ml-5",
          direction === "horizontal" && size === "small" && "-ml-3",
          direction === "vertical" && size === "medium" && "-mt-5",
          direction === "vertical" && size === "small" && "-mt-3",
        ]}
      >
        <Image
          src={typeof src === "string" ? src : (src as ImageMetadata)}
          alt={alt}
          width={size === "small" ? 36 : 64}
          height={size === "small" ? 36 : 64}
          class:list={[
            "avatar-image object-cover aspect-square",
            avatar({ size, shape }),
            imageStyles,
          ]}
        />
        <span
          class:list={[
            "avatar-name absolute opacity-0 -translate-y-1/2 px-[6px] py-[1px] rounded-full",
            nameStyles,
            size === "medium" ? "text-sm" : "text-xs",
            direction === "horizontal" && "left-1/2 -translate-x-1/2",
            direction === "vertical" && "right-full top-1/2 mr-3",
            direction === "horizontal" && size === "small" && "-top-5",
            direction === "horizontal" && size === "medium" && "-top-6",
          ]}
        >
          {name}
        </span>
      </li>
    ))
  }
</ul>

<script>
  import { gsap } from "gsap";

  function initAvatar() {
    const $avatarList = document.querySelectorAll(".avatar");
    if (!$avatarList.length) return;

    $avatarList.forEach(($avatarItem) => {
      const handleAvatar = (ev: Event, isEnter: boolean) => {
        const $item = (ev.target as HTMLElement).closest(".avatar-item");
        if ($item && $avatarItem.contains($item)) {
          const $name = $item.querySelector(".avatar-name") as HTMLElement;

          gsap.to($item, {
            y: isEnter ? -10 : 0,
            duration: 0.6,
            ease: "elastic.out(1, 0.5)",
          });

          gsap.to($name, {
            opacity: isEnter ? 1 : 0,
            filter: isEnter ? " blur(0px)" : "blur(4px)",
            duration: 0.2,
            ease: "power1",
          });
        }
      };

      $avatarItem.addEventListener(
        "mouseenter",
        (ev) => handleAvatar(ev, true),
        true,
      );
      $avatarItem.addEventListener(
        "mouseleave",
        (ev) => handleAvatar(ev, false),
        true,
      );
    });
  }
  initAvatar();
</script>

<style>
  .avatar-name {
    visibility: hidden;
    transition: visibility 0.3s ease;
  }
  .avatar-item:hover .avatar-name {
    visibility: visible;
  }
</style>
