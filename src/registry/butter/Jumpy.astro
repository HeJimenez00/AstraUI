---
import { cva } from "class-variance-authority";
import { Image } from "astro:assets";
import { type ImageItem } from "../../types/index.ts";

interface JellyProps {
  images: ImageItem[];
  size?: "small" | "medium" | "large";
  minRotation?: number;
  maxRotation?: number;
  wrapperStyles?: string;
  imageStyles?: string;
  spacing?: string;
  spacingHover?: number;
  initEase?: gsap.EaseFunction | string;
  hoverEase?: gsap.EaseFunction | string;
  duration?: number;
}

const jelly = cva("jelly", {
  variants: {
    size: {
      small: ["w-10 h-10", "md:w-12 md:h-12", "lg:w-14 lg:h-14", "ring-3"],
      medium: [
        "w-12 h-12",
        "md:w-14 md:h-14",
        "lg:w-16 lg:h-16",
        "ring-3 md:ring-4",
      ],
      large: [
        "w-14 h-14",
        "md:w-18 md:h-18",
        "lg:w-22 lg:h-22",
        "ring-3 md:ring-4",
      ],
    },
  },
});

let rotations: number[] = [];

const generateRotations = function (min: number, max: number) {
  for (let i = 0; i < images.length; i++) {
    const rotation = Math.random() * (max - min) + min;

    let getValue = Math.random() > 0.5 ? rotation : -rotation;
    rotations = [...rotations, getValue];
  }
};

const {
  images = [],
  size = "large",
  spacing = "-ml-6",
  spacingHover = 40,
  minRotation = 7,
  maxRotation = 8,
  duration = 0.4,
  initEase = "elastic.out(0.5, 0.4)",
  hoverEase = "power4.out",
  imageStyles = "",
  wrapperStyles = "",
} = Astro.props as JellyProps;

generateRotations(minRotation, maxRotation);
---

<div
  class="flex image-gallery"
  data-jumpy-rotations={rotations.join(",")}
  data-jumpy-spacing-hover={spacingHover}
  data-jumpy-init-ease={initEase}
  data-jumpy-hover-ease={hoverEase}
  data-jumpy-duration={duration}
>
  {
    images &&
      images.map(({ src, alt, href }, idx) => (
        <>
          {href ? (
            <a
              href={href}
              target="_blank"
              class:list={[
                "relative first:ml-0 ring-white rounded-xl overflow-hidden shadow-black/20 shadow-xl dark:ring-zinc-100",
                jelly({ size }),
                wrapperStyles,
                spacing,
              ]}
              style={`transform: rotate(${rotations[idx]}deg)`}
            >
              <Image
                src={src || "/placeholder.svg"}
                alt={alt}
                width={size === "small" ? 56 : size === "medium" ? 64 : 88}
                height={size === "small" ? 56 : size === "medium" ? 64 : 88}
                widths={[56, 64, 88]}
                sizes="(max-width: 360px) 56px, (max-width: 720px) 64px, 88px"
                loading="lazy"
                class:list={["aspect-square object-cover", imageStyles]}
              />
            </a>
          ) : (
            <div
              class:list={[
                "relative first:ml-0 ring-white rounded-xl overflow-hidden shadow-black/20 shadow-xl dark:ring-zinc-100",
                jelly({ size }),
                spacing,
              ]}
              style={`transform: rotate(${rotations[idx]}deg)`}
            >
              {" "}
              <Image
                src={src || "/placeholder.svg"}
                alt={alt}
                width={size === "small" ? 56 : size === "medium" ? 64 : 88}
                height={size === "small" ? 56 : size === "medium" ? 64 : 88}
                widths={[56, 64, 88]}
                sizes="(max-width: 360px) 56px, (max-width: 720px) 64px, 88px"
                loading="lazy"
                class:list={["aspect-square object-cover", imageStyles]}
              />
            </div>
          )}
        </>
      ))
  }
</div>

<script>
  import { gsap } from "gsap";

  function initJumpy(container: HTMLElement) {
    const rotations =
      container?.dataset.jumpyRotations
        ?.split(",")
        .map((value) => Number(value)) ?? [];

    const spacing = Number(container?.dataset.jumpySpacingHover);
    const initEase = container?.dataset.jumpyInitEase;
    const hoverEase = container?.dataset.jumpyHoverEase;
    const duration = Number(container?.dataset.jumpyDuration);

    const images = container?.children ?? [];
    let lastHoveredRotation: number | null = null;

    gsap.fromTo(
      images,
      { scale: 0 },
      { scale: 1, stagger: 0.05, ease: initEase },
    );

    function moveImages(idx: number) {
      if (lastHoveredRotation !== null && lastHoveredRotation !== idx) {
        gsap.to(images[lastHoveredRotation], {
          duration: 0.6,
          rotation: rotations[lastHoveredRotation],
          ease: hoverEase,
        });
      }

      lastHoveredRotation = idx;

      const SPACING = spacing;

      [...images].forEach((image, i) => {
        gsap.to(image, {
          x: idx < i ? SPACING : idx > i ? -SPACING : 0,
          duration,
          ease: hoverEase,
          rotation: idx === i ? 0 : rotations[i],
        });
      });
    }

    function leaveImages() {
      [...images].forEach((image, idx) => {
        gsap.to(image, {
          rotate: rotations[idx],
          x: 0,
          duration: duration + 0.2,
          ease: initEase,
        });
      });
    }
    Array.from(images).forEach((image, idx) => {
      image.addEventListener("mouseenter", () => moveImages(idx));
    });

    container?.addEventListener("mouseleave", () => leaveImages());
  }

  document.addEventListener("DOMContentLoaded", () => {
    const galleries = document.querySelectorAll(".image-gallery");

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting && entry.target instanceof HTMLElement) {
          initJumpy(entry.target);
          observer.unobserve(entry.target);
        }
      });
    });
    galleries.forEach((gallery) => observer.observe(gallery));
  });
</script>
